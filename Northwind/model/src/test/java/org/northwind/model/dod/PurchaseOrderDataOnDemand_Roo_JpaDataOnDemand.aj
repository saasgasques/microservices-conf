// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.northwind.model.dod;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.northwind.model.PurchaseOrder;
import org.northwind.model.dod.PurchaseOrderDataOnDemand;
import org.northwind.model.dod.PurchaseOrderFactory;

privileged aspect PurchaseOrderDataOnDemand_Roo_JpaDataOnDemand {
    
    /**
     * Random generator for the entities index.
     * 
     */
    private Random PurchaseOrderDataOnDemand.rnd = new SecureRandom();
    
    /**
     * List of created entities.
     * 
     */
    private List<PurchaseOrder> PurchaseOrderDataOnDemand.data;
    
    /**
     * EntityManager to persist the entities.
     * 
     */
    private EntityManager PurchaseOrderDataOnDemand.entityManager;
    
    /**
     * Number of elements to create and persist.
     * 
     */
    private int PurchaseOrderDataOnDemand.size;
    
    /**
     * Factory to create entity instances.
     * 
     */
    private PurchaseOrderFactory PurchaseOrderDataOnDemand.factory = new PurchaseOrderFactory();
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param entityManager
     */
    public PurchaseOrderDataOnDemand.new(EntityManager entityManager) {
        this(entityManager, 10);
    }

    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param entityManager
     * @param size
     */
    public PurchaseOrderDataOnDemand.new(EntityManager entityManager, int size) {
        setEntityManager(entityManager);
        setSize(size);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return Random
     */
    public Random PurchaseOrderDataOnDemand.getRnd() {
        return rnd;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param rnd
     */
    public void PurchaseOrderDataOnDemand.setRnd(Random rnd) {
        this.rnd = rnd;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<PurchaseOrder> PurchaseOrderDataOnDemand.getData() {
        return data;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param data
     */
    public void PurchaseOrderDataOnDemand.setData(List<PurchaseOrder> data) {
        this.data = data;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return EntityManager
     */
    public EntityManager PurchaseOrderDataOnDemand.getEntityManager() {
        return entityManager;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entityManager
     */
    public void PurchaseOrderDataOnDemand.setEntityManager(EntityManager entityManager) {
        this.entityManager = entityManager;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Integer
     */
    public int PurchaseOrderDataOnDemand.getSize() {
        return size;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param size
     */
    public void PurchaseOrderDataOnDemand.setSize(int size) {
        this.size = size;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return PurchaseOrderFactory
     */
    public PurchaseOrderFactory PurchaseOrderDataOnDemand.getFactory() {
        return factory;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param factory
     */
    public void PurchaseOrderDataOnDemand.setFactory(PurchaseOrderFactory factory) {
        this.factory = factory;
    }
    
    /**
     * Creates a new transient PurchaseOrder in a random index out of the initial list of the created entities,
     * with an index greater than {@link PurchaseOrderDataOnDemand#getSize()} - 1.
     * 
     * @return PurchaseOrder the generated transient {@link PurchaseOrder}
     */
    public PurchaseOrder PurchaseOrderDataOnDemand.getNewRandomTransientPurchaseOrder() {
        int randomIndex = getSize() + getRnd().nextInt(Integer.MAX_VALUE - getSize());
        return getFactory().create(randomIndex);
    }
    
    /**
     * Returns a generated and persisted {@link PurchaseOrder} in a given index.
     * 
     * @param index the position of the {@link PurchaseOrder} to return
     * @return PurchaseOrder the specific {@link PurchaseOrder}
     */
    public PurchaseOrder PurchaseOrderDataOnDemand.getSpecificPurchaseOrder(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (getData().size() - 1)) {
            index = getData().size() - 1;
        }
        return getData().get(index);
    }
    
    /**
     * Returns a generated and persisted {@link PurchaseOrder} in a random index.
     * 
     * @return PurchaseOrder a random {@link PurchaseOrder}
     */
    public PurchaseOrder PurchaseOrderDataOnDemand.getRandomPurchaseOrder() {
        init();
        return getData().get(getRnd().nextInt(getData().size()));
    }
    
    /**
     * Creates the initial list of generated entities.
     * 
     */
    public void PurchaseOrderDataOnDemand.init() {
        int from = 0;
        int to = 10;
        
        CriteriaBuilder cb = getEntityManager().getCriteriaBuilder();
        CriteriaQuery<PurchaseOrder> cq = cb.createQuery(PurchaseOrder.class);
        Root<PurchaseOrder> rootEntry = cq.from(PurchaseOrder.class);
        CriteriaQuery<PurchaseOrder> all = cq.select(rootEntry);
        TypedQuery<PurchaseOrder> allQuery = 
            getEntityManager().createQuery(all).setFirstResult(from).setMaxResults(to);
        setData(allQuery.getResultList());
        if (getData() == null) {
            throw new IllegalStateException(
                "Find entries implementation for 'PurchaseOrder' illegally returned null");
        }
        if (!getData().isEmpty()) {
            return;
        }
        
        setData(new ArrayList<PurchaseOrder>());
        for (int i = from; i < to; i++) {
            PurchaseOrder obj = getFactory().create(i);
            try {
                getEntityManager().persist(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter
                      .hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".")
                    .append(cv.getPropertyPath()).append(": ").append(cv.getMessage())
                    .append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            getEntityManager().flush();
            getData().add(obj);
        }
    }
    
}
