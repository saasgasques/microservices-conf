// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.northwind.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.northwind.model.Category;
import org.northwind.model.Product;
import org.northwind.model.QProduct;
import org.northwind.model.Supplier;
import org.northwind.repository.ProductRepositoryImpl;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect ProductRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: ProductRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProductRepositoryImpl.CATEGORY = "category";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProductRepositoryImpl.NAME = "name";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProductRepositoryImpl.CODE = "code";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProductRepositoryImpl.QUANTITY_PER_UNIT = "quantityPerUnit";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProductRepositoryImpl.UNIT_COST = "unitCost";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProductRepositoryImpl.UNIT_PRICE = "unitPrice";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProductRepositoryImpl.UNITS_IN_STOCK = "unitsInStock";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProductRepositoryImpl.REORDER_LEVEL = "reorderLevel";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProductRepositoryImpl.DISCONTINUED = "discontinued";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ProductRepositoryImpl.SUPPLIER = "supplier";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Product> ProductRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QProduct product = QProduct.product;
        
        JPQLQuery<Product> query = from(product);
        
        Path<?>[] paths = new Path<?>[] {product.category,product.name,product.code,product.quantityPerUnit,product.unitCost,product.unitPrice,product.unitsInStock,product.reorderLevel,product.discontinued,product.supplier};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(CATEGORY, product.category)
			.map(NAME, product.name)
			.map(CODE, product.code)
			.map(QUANTITY_PER_UNIT, product.quantityPerUnit)
			.map(UNIT_COST, product.unitCost)
			.map(UNIT_PRICE, product.unitPrice)
			.map(UNITS_IN_STOCK, product.unitsInStock)
			.map(REORDER_LEVEL, product.reorderLevel)
			.map(DISCONTINUED, product.discontinued)
			.map(SUPPLIER, product.supplier);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, product);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Product> ProductRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QProduct product = QProduct.product;
        
        JPQLQuery<Product> query = from(product);
        
        Path<?>[] paths = new Path<?>[] {product.category,product.name,product.code,product.quantityPerUnit,product.unitCost,product.unitPrice,product.unitsInStock,product.reorderLevel,product.discontinued,product.supplier};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(product.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(CATEGORY, product.category)
			.map(NAME, product.name)
			.map(CODE, product.code)
			.map(QUANTITY_PER_UNIT, product.quantityPerUnit)
			.map(UNIT_COST, product.unitCost)
			.map(UNIT_PRICE, product.unitPrice)
			.map(UNITS_IN_STOCK, product.unitsInStock)
			.map(REORDER_LEVEL, product.reorderLevel)
			.map(DISCONTINUED, product.discontinued)
			.map(SUPPLIER, product.supplier);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, product);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param category
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Product> ProductRepositoryImpl.findByCategory(Category category, GlobalSearch globalSearch, Pageable pageable) {
        
        QProduct product = QProduct.product;
        
        JPQLQuery<Product> query = from(product);
        
        Assert.notNull(category, "category is required");
        
        query.where(product.category.eq(category));
        Path<?>[] paths = new Path<?>[] {product.category,product.name,product.code,product.quantityPerUnit,product.unitCost,product.unitPrice,product.unitsInStock,product.reorderLevel,product.discontinued,product.supplier};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(CATEGORY, product.category)
			.map(NAME, product.name)
			.map(CODE, product.code)
			.map(QUANTITY_PER_UNIT, product.quantityPerUnit)
			.map(UNIT_COST, product.unitCost)
			.map(UNIT_PRICE, product.unitPrice)
			.map(UNITS_IN_STOCK, product.unitsInStock)
			.map(REORDER_LEVEL, product.reorderLevel)
			.map(DISCONTINUED, product.discontinued)
			.map(SUPPLIER, product.supplier);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, product);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param supplier
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Product> ProductRepositoryImpl.findBySupplier(Supplier supplier, GlobalSearch globalSearch, Pageable pageable) {
        
        QProduct product = QProduct.product;
        
        JPQLQuery<Product> query = from(product);
        
        Assert.notNull(supplier, "supplier is required");
        
        query.where(product.supplier.eq(supplier));
        Path<?>[] paths = new Path<?>[] {product.category,product.name,product.code,product.quantityPerUnit,product.unitCost,product.unitPrice,product.unitsInStock,product.reorderLevel,product.discontinued,product.supplier};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(CATEGORY, product.category)
			.map(NAME, product.name)
			.map(CODE, product.code)
			.map(QUANTITY_PER_UNIT, product.quantityPerUnit)
			.map(UNIT_COST, product.unitCost)
			.map(UNIT_PRICE, product.unitPrice)
			.map(UNITS_IN_STOCK, product.unitsInStock)
			.map(REORDER_LEVEL, product.reorderLevel)
			.map(DISCONTINUED, product.discontinued)
			.map(SUPPLIER, product.supplier);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, product);
    }
    
}
