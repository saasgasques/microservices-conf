// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.northwind.repository;

import com.querydsl.core.types.Path;
import com.querydsl.core.types.Projections;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.northwind.model.Customer;
import org.northwind.model.CustomerInfo;
import org.northwind.model.QCustomer;
import org.northwind.repository.CustomerRepositoryImpl;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect CustomerRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: CustomerRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CustomerRepositoryImpl.CITY = "city";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CustomerRepositoryImpl.COUNTRY = "country";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CustomerRepositoryImpl.ADDRESS = "address";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CustomerRepositoryImpl.POSTAL_CODE = "postalCode";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CustomerRepositoryImpl.PHONE = "phone";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CustomerRepositoryImpl.REGION = "region";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CustomerRepositoryImpl.COMPANY_NAME = "companyName";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CustomerRepositoryImpl.CONTACT_NAME = "contactName";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CustomerRepositoryImpl.CONTACT_TITLE = "contactTitle";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CustomerRepositoryImpl.FAX = "fax";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CustomerRepositoryImpl.EMAIL = "email";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CustomerRepositoryImpl.ID = "id";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<CustomerInfo> CustomerRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QCustomer customer = QCustomer.customer;
        
        JPQLQuery<Customer> query = from(customer);
        
        Path<?>[] paths = new Path<?>[] {customer.id,customer.companyName,customer.email,customer.fax};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(ID, customer.id)
			.map(COMPANY_NAME, customer.companyName)
			.map(EMAIL, customer.email)
			.map(FAX, customer.fax);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, Projections.constructor(CustomerInfo.class, customer.id, customer.companyName, customer.email, customer.fax ));
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<CustomerInfo> CustomerRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QCustomer customer = QCustomer.customer;
        
        JPQLQuery<Customer> query = from(customer);
        
        Path<?>[] paths = new Path<?>[] {customer.id,customer.companyName,customer.email,customer.fax};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(customer.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(ID, customer.id)
			.map(COMPANY_NAME, customer.companyName)
			.map(EMAIL, customer.email)
			.map(FAX, customer.fax);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, Projections.constructor(CustomerInfo.class, customer.id, customer.companyName, customer.email, customer.fax ));
    }
    
}
