// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.northwind.repository;

import static org.assertj.core.api.Assertions.assertThat;

import io.springlets.data.domain.GlobalSearch;
import java.util.List;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.northwind.application.config.SpringDataJpaDetachableRepositoryConfiguration;
import org.northwind.model.Country;
import org.northwind.model.dod.CountryDataOnDemand;
import org.northwind.model.dod.DataOnDemandConfiguration;
import org.northwind.repository.CountryRepository;
import org.northwind.repository.CountryRepositoryIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.context.annotation.Import;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.test.context.junit4.SpringRunner;

privileged aspect CountryRepositoryIT_Roo_RepositoryJpaIntegrationTest {
    
    declare @type: CountryRepositoryIT: @RunWith(SpringRunner.class);
    
    declare @type: CountryRepositoryIT: @DataJpaTest;
    
    declare @type: CountryRepositoryIT: @Import({ DataOnDemandConfiguration.class, SpringDataJpaDetachableRepositoryConfiguration.class });
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    @Rule
    public ExpectedException CountryRepositoryIT.thrown = ExpectedException.none();
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    @Autowired
    private CountryRepository CountryRepositoryIT.repository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    @Autowired
    private CountryDataOnDemand CountryRepositoryIT.dod;
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return CountryRepository
     */
    public CountryRepository CountryRepositoryIT.getRepository() {
        return repository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return CountryDataOnDemand
     */
    public CountryDataOnDemand CountryRepositoryIT.getDod() {
        return dod;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     */
    @Before
    public void CountryRepositoryIT.checkDataOnDemandHasInitializedCorrectly() {
        assertThat(getDod().getRandomCountry())
            .as("Check data on demand for 'Country' initializes correctly by getting a random Country")
            .isNotNull();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     */
    @Test
    public void CountryRepositoryIT.countShouldReturnExpectedValue() {
        // Verify
        assertThat(getRepository().count()).as("Check there are available 'Country' entries").isGreaterThan(0);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     */
    @Test
    public void CountryRepositoryIT.findOneShouldReturnExistingCountry() {
        // Setup
        Long id = getRandomCountryId();
        
        // Exercise
        Country country = getRepository().findOne(id);
        
        // Verify
        assertThat(country).as("Check that findOne illegally returned null for id %s", id).isNotNull();
        assertThat(id).as("Check the identifier of the found 'Country' is the same used to look for it")
            .isEqualTo(country.getId());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     */
    @Test
    public void CountryRepositoryIT.findAllShouldReturnAllCountries() {
        // Setup
        assertThat(getRepository().count())
            .as("Check the number of entries is not too big (250 entries). "
                + "If it is, please review the tests so it doesn't take too long to run them")
            .isLessThan(250);
        
        // Exercise
        List<Country> result = getRepository().findAll();
        
        // Verify
        assertThat(result).as("Check 'findAll' returns a not null list of entries").isNotNull();
        assertThat(result.size()).as("Check 'findAll' returns a not empty list of entries")
            .isGreaterThan(0);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     */
    @Test
    public void CountryRepositoryIT.findAllCustomNotFilteredNotPagedShouldReturnAllCountries() {
        // Exercise
        Page<Country> all = getRepository().findAll((GlobalSearch) null, new PageRequest(0, getDod().getSize()));
        
        // Verify
        assertThat(all.getNumberOfElements())
            .as("Check 'findAll' with null 'GlobalSearch' and no pagination returns all entries")
            .isEqualTo(getDod().getSize());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     */
    @Test
    public void CountryRepositoryIT.findAllCustomNotFilteredPagedShouldReturnACountriesPage() {
        // Exercise
        Page<Country> all = getRepository().findAll((GlobalSearch) null, new PageRequest(0, 3));
        
        // Verify
        assertThat(all.getNumberOfElements())
            .as("Check result number is not greater than the page size").isLessThanOrEqualTo(3);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    private Long CountryRepositoryIT.getRandomCountryId() {
        Country country = getDod().getRandomCountry();
        Long id = country.getId();
        assertThat(id).as("Check the Data on demand generated a 'Country' with an identifier").isNotNull();
        return id;
    }
    
}
